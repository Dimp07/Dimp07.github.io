{"title":"使用Git提交本地文件到Github上","date":"2023-12-05T12:45:07.000Z","toc":true,"summary":"很详细，很适合小白","source":"_posts/使用Git提交本地文件到Github上.md","raw":"---\ntitle: 使用Git提交本地文件到Github上\ndate: 2023-12-05 20:45:07\ntags: GitHub\ntoc: true\nsummary: \"很详细，很适合小白\"\ncopyright: disabled\nauthor: \"imp\"\n---\n\n## 绑定 Git 与 Github\n\n> 1. 生成SSH key\n\n要想生成SSH key，首先就得安装 SSH，对于Linux 和 Mac 系统，其默认是安装 SSH 的，而对于 Windows 系统，其默认是不安装 SSH 的，不过由于我们安装了 Git Bash，其也应该自带了 SSH. 可以通过在 Git Bash 中输入 `ssh` 命令，查看本机是否安装 SSH：\n\n![image-20230416124440391](../image/使用Git提交本地文件到Github上/image-20230416124440391.png)\n\n如果出现上图所示，则说明已经安装 SSH ，输入 `ssh-keygen -t rsa` 命令，表示我们指定 RSA 算法生成密钥，然后敲三次回车键，期间不需要输入密码，之后就就会生成两个文件，分别为id_rsa和id_rsa.pub，即密钥id_rsa和公钥id_rsa.pub. 对于这两个文件，其都为隐藏文件，默认生成在以下目录：\n\n- Linux 系统：`~/.ssh`\n- Mac 系统：`~/.ssh`\n- Windows 系统：`C:\\Documents and Settings\\username\\\\.ssh`\n- Windows 10 ThinkPad：`C:\\Users\\think\\.ssh`\n\n![image-20230416124816690](../image/使用Git提交本地文件到Github上/image-20230416124816690.png)\n\n密钥和公钥生成之后，我们要做的事情就是把公钥`id_rsa.pub`的内容添加到 GitHub，这样我们本地的密钥`id_rsa`和 GitHub 上的公钥`id_rsa.pub`才可以进行匹配，授权成功后，就可以向 GitHub 提交代码了。\n\n\n\n> 2. 添加 `SSH key`\n\n进入Github主页，点击头像，点击 `Settings`。\n\n![image-20230416125137198](../image/使用Git提交本地文件到Github上/image-20230416125137198.png)\n\n进入后点击 `SSH and GPG keys`。\n\n![image-20230416125226632](../image/使用Git提交本地文件到Github上/image-20230416125226632.png)\n\n点击 `New SSH key`。\n\n![image-20230416125405786](../image/使用Git提交本地文件到Github上/image-20230416125405786.png)\n\nTitle 可以自己定义，Key 处填 `id_rsa.pub` 里的内容。\n\n![image-20230416125524020](../image/使用Git提交本地文件到Github上/image-20230416125524020.png)\n\n\n\n> 3. 验证绑定是否成功\n\n添加完成 `SSH key` 后可以在 Git Bash 中输入 `ssh -T git@github.com` 进行判断。\n\n![image-20230416125931664](../image/使用Git提交本地文件到Github上/image-20230416125931664.png)\n\n如图所示，即为 Git 与 Github 绑定成功。\n\n\n\n## 将本地文件提交到 Github 上\n\n> 1. 在 Github 上创建 repository\n\n点击 Your repositories.\n\n![image-20230416130343647](../image/使用Git提交本地文件到Github上/image-20230416130343647.png)\n\n之后点击 `New` 。\n\n![image-20230416130447956](../image/使用Git提交本地文件到Github上/image-20230416130447956.png)\n\n输入创建的 Repository name，（记得勾选 Add a README file）。\n\n![image-20230416130534223](../image/使用Git提交本地文件到Github上/image-20230416130534223.png)\n\n\n\n> 2. 克隆 Github 上的仓库到本地。\n\n点击 `Code` ，点击 `SSH` ， 复制链接。\n\n![image-20230416130922895](../image/使用Git提交本地文件到Github上/image-20230416130922895.png)\n\n在 Git Bach 上输入 `git clone \"复制的链接\"` 命令。\n\n如下图所示，即为成功。\n\n![image-20230416131238787](../image/使用Git提交本地文件到Github上/image-20230416131238787.png)\n\n![image-20230416131655201](../image/使用Git提交本地文件到Github上/image-20230416131655201.png)\n\n\n\n> 3. 将本地文件提交到 Github 上。\n\n在 Git Bach 上输入 `cd text-01/` 命令（ cd 后面的是你创建的文件夹名字），或者是关掉Git Bach，在 text-01 文件夹中打开 Git Bach 。\n\n![image-20230416132026682](../image/使用Git提交本地文件到Github上/image-20230416132026682.png)\n\n输入 `git status` 命令可以查看仓库状态。\n\n ![image-20230416132615563](../image/使用Git提交本地文件到Github上/image-20230416132615563.png)\n\n在 text-01中新建一个文件 work.txt，用于提交测试。\n\n![image-20230416132803696](../image/使用Git提交本地文件到Github上/image-20230416132803696.png)\n\n![image-20230416132845151](../image/使用Git提交本地文件到Github上/image-20230416132845151.png)\n\n输入 `git add ./` 命令（add 后面有空格，才到 .），再输入 `git commit -m\"注释\"` 命令。\n\n![image-20230416133027119](../image/使用Git提交本地文件到Github上/image-20230416133027119.png)\n\n输入 `git push origin main` 命令，等待完成后在 Github 上刷新页面，就会发现提交成功。\n\n![image-20230416133255417](../image/使用Git提交本地文件到Github上/image-20230416133255417.png)\n\n![image-20230416133410417](../image/使用Git提交本地文件到Github上/image-20230416133410417.png)\n\n![image-20230416133440613](../image/使用Git提交本地文件到Github上/image-20230416133440613.png)\n\n\n\n> 如果在输入 `git commit` 命令时出现 fatal: unable to auto-detect email address (got ‘…@…(none)’) 。这是由于未配置github用户名和邮箱所致\n\n解决方法：配置 Github 用户名与邮箱。用户名是 Github 上的用户名， 邮箱是注册 Github 时用的邮箱，输入命令时用户名与邮箱要加上 \"\" 。\n\n`git config --global user.name \"你的用户名\"`\n\n`git config --global user.email \"你的邮箱\"`\n\n以上就是使用 Git 提交本地文件到 Github 上的内容。\n","slug":"使用Git提交本地文件到Github上","published":true,"updated":"2023-12-14T14:15:56.544Z","_id":"clq87ytof0005zstfem3368df","comments":true,"layout":"post","photos":[],"link":"","html":"<h2 id=\"绑定-Git-与-Github\"><a href=\"#绑定-Git-与-Github\" class=\"headerlink\" title=\"绑定 Git 与 Github\"></a>绑定 Git 与 Github</h2><blockquote>\n<ol>\n<li>生成SSH key</li>\n</ol>\n</blockquote>\n<p>要想生成SSH key，首先就得安装 SSH，对于Linux 和 Mac 系统，其默认是安装 SSH 的，而对于 Windows 系统，其默认是不安装 SSH 的，不过由于我们安装了 Git Bash，其也应该自带了 SSH. 可以通过在 Git Bash 中输入 <code>ssh</code> 命令，查看本机是否安装 SSH：</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416124440391.png\" alt=\"image-20230416124440391\"></p>\n<p>如果出现上图所示，则说明已经安装 SSH ，输入 <code>ssh-keygen -t rsa</code> 命令，表示我们指定 RSA 算法生成密钥，然后敲三次回车键，期间不需要输入密码，之后就就会生成两个文件，分别为id_rsa和id_rsa.pub，即密钥id_rsa和公钥id_rsa.pub. 对于这两个文件，其都为隐藏文件，默认生成在以下目录：</p>\n<ul>\n<li>Linux 系统：<code>~/.ssh</code></li>\n<li>Mac 系统：<code>~/.ssh</code></li>\n<li>Windows 系统：<code>C:\\Documents and Settings\\username\\\\.ssh</code></li>\n<li>Windows 10 ThinkPad：<code>C:\\Users\\think\\.ssh</code></li>\n</ul>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416124816690.png\" alt=\"image-20230416124816690\"></p>\n<p>密钥和公钥生成之后，我们要做的事情就是把公钥<code>id_rsa.pub</code>的内容添加到 GitHub，这样我们本地的密钥<code>id_rsa</code>和 GitHub 上的公钥<code>id_rsa.pub</code>才可以进行匹配，授权成功后，就可以向 GitHub 提交代码了。</p>\n<blockquote>\n<ol start=\"2\">\n<li>添加 <code>SSH key</code></li>\n</ol>\n</blockquote>\n<p>进入Github主页，点击头像，点击 <code>Settings</code>。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125137198.png\" alt=\"image-20230416125137198\"></p>\n<p>进入后点击 <code>SSH and GPG keys</code>。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125226632.png\" alt=\"image-20230416125226632\"></p>\n<p>点击 <code>New SSH key</code>。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125405786.png\" alt=\"image-20230416125405786\"></p>\n<p>Title 可以自己定义，Key 处填 <code>id_rsa.pub</code> 里的内容。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125524020.png\" alt=\"image-20230416125524020\"></p>\n<blockquote>\n<ol start=\"3\">\n<li>验证绑定是否成功</li>\n</ol>\n</blockquote>\n<p>添加完成 <code>SSH key</code> 后可以在 Git Bash 中输入 <code>ssh -T git@github.com</code> 进行判断。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125931664.png\" alt=\"image-20230416125931664\"></p>\n<p>如图所示，即为 Git 与 Github 绑定成功。</p>\n<h2 id=\"将本地文件提交到-Github-上\"><a href=\"#将本地文件提交到-Github-上\" class=\"headerlink\" title=\"将本地文件提交到 Github 上\"></a>将本地文件提交到 Github 上</h2><blockquote>\n<ol>\n<li>在 Github 上创建 repository</li>\n</ol>\n</blockquote>\n<p>点击 Your repositories.</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130343647.png\" alt=\"image-20230416130343647\"></p>\n<p>之后点击 <code>New</code> 。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130447956.png\" alt=\"image-20230416130447956\"></p>\n<p>输入创建的 Repository name，（记得勾选 Add a README file）。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130534223.png\" alt=\"image-20230416130534223\"></p>\n<blockquote>\n<ol start=\"2\">\n<li>克隆 Github 上的仓库到本地。</li>\n</ol>\n</blockquote>\n<p>点击 <code>Code</code> ，点击 <code>SSH</code> ， 复制链接。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130922895.png\" alt=\"image-20230416130922895\"></p>\n<p>在 Git Bach 上输入 <code>git clone &quot;复制的链接&quot;</code> 命令。</p>\n<p>如下图所示，即为成功。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416131238787.png\" alt=\"image-20230416131238787\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416131655201.png\" alt=\"image-20230416131655201\"></p>\n<blockquote>\n<ol start=\"3\">\n<li>将本地文件提交到 Github 上。</li>\n</ol>\n</blockquote>\n<p>在 Git Bach 上输入 <code>cd text-01/</code> 命令（ cd 后面的是你创建的文件夹名字），或者是关掉Git Bach，在 text-01 文件夹中打开 Git Bach 。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132026682.png\" alt=\"image-20230416132026682\"></p>\n<p>输入 <code>git status</code> 命令可以查看仓库状态。</p>\n<p> <img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132615563.png\" alt=\"image-20230416132615563\"></p>\n<p>在 text-01中新建一个文件 work.txt，用于提交测试。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132803696.png\" alt=\"image-20230416132803696\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132845151.png\" alt=\"image-20230416132845151\"></p>\n<p>输入 <code>git add ./</code> 命令（add 后面有空格，才到 .），再输入 <code>git commit -m&quot;注释&quot;</code> 命令。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133027119.png\" alt=\"image-20230416133027119\"></p>\n<p>输入 <code>git push origin main</code> 命令，等待完成后在 Github 上刷新页面，就会发现提交成功。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133255417.png\" alt=\"image-20230416133255417\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133410417.png\" alt=\"image-20230416133410417\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133440613.png\" alt=\"image-20230416133440613\"></p>\n<blockquote>\n<p>如果在输入 <code>git commit</code> 命令时出现 fatal: unable to auto-detect email address (got ‘…@…(none)’) 。这是由于未配置github用户名和邮箱所致</p>\n</blockquote>\n<p>解决方法：配置 Github 用户名与邮箱。用户名是 Github 上的用户名， 邮箱是注册 Github 时用的邮箱，输入命令时用户名与邮箱要加上 “” 。</p>\n<p><code>git config --global user.name &quot;你的用户名&quot;</code></p>\n<p><code>git config --global user.email &quot;你的邮箱&quot;</code></p>\n<p>以上就是使用 Git 提交本地文件到 Github 上的内容。</p>\n","excerpt":"","more":"<h2 id=\"绑定-Git-与-Github\"><a href=\"#绑定-Git-与-Github\" class=\"headerlink\" title=\"绑定 Git 与 Github\"></a>绑定 Git 与 Github</h2><blockquote>\n<ol>\n<li>生成SSH key</li>\n</ol>\n</blockquote>\n<p>要想生成SSH key，首先就得安装 SSH，对于Linux 和 Mac 系统，其默认是安装 SSH 的，而对于 Windows 系统，其默认是不安装 SSH 的，不过由于我们安装了 Git Bash，其也应该自带了 SSH. 可以通过在 Git Bash 中输入 <code>ssh</code> 命令，查看本机是否安装 SSH：</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416124440391.png\" alt=\"image-20230416124440391\"></p>\n<p>如果出现上图所示，则说明已经安装 SSH ，输入 <code>ssh-keygen -t rsa</code> 命令，表示我们指定 RSA 算法生成密钥，然后敲三次回车键，期间不需要输入密码，之后就就会生成两个文件，分别为id_rsa和id_rsa.pub，即密钥id_rsa和公钥id_rsa.pub. 对于这两个文件，其都为隐藏文件，默认生成在以下目录：</p>\n<ul>\n<li>Linux 系统：<code>~/.ssh</code></li>\n<li>Mac 系统：<code>~/.ssh</code></li>\n<li>Windows 系统：<code>C:\\Documents and Settings\\username\\\\.ssh</code></li>\n<li>Windows 10 ThinkPad：<code>C:\\Users\\think\\.ssh</code></li>\n</ul>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416124816690.png\" alt=\"image-20230416124816690\"></p>\n<p>密钥和公钥生成之后，我们要做的事情就是把公钥<code>id_rsa.pub</code>的内容添加到 GitHub，这样我们本地的密钥<code>id_rsa</code>和 GitHub 上的公钥<code>id_rsa.pub</code>才可以进行匹配，授权成功后，就可以向 GitHub 提交代码了。</p>\n<blockquote>\n<ol start=\"2\">\n<li>添加 <code>SSH key</code></li>\n</ol>\n</blockquote>\n<p>进入Github主页，点击头像，点击 <code>Settings</code>。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125137198.png\" alt=\"image-20230416125137198\"></p>\n<p>进入后点击 <code>SSH and GPG keys</code>。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125226632.png\" alt=\"image-20230416125226632\"></p>\n<p>点击 <code>New SSH key</code>。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125405786.png\" alt=\"image-20230416125405786\"></p>\n<p>Title 可以自己定义，Key 处填 <code>id_rsa.pub</code> 里的内容。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125524020.png\" alt=\"image-20230416125524020\"></p>\n<blockquote>\n<ol start=\"3\">\n<li>验证绑定是否成功</li>\n</ol>\n</blockquote>\n<p>添加完成 <code>SSH key</code> 后可以在 Git Bash 中输入 <code>ssh -T git@github.com</code> 进行判断。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416125931664.png\" alt=\"image-20230416125931664\"></p>\n<p>如图所示，即为 Git 与 Github 绑定成功。</p>\n<h2 id=\"将本地文件提交到-Github-上\"><a href=\"#将本地文件提交到-Github-上\" class=\"headerlink\" title=\"将本地文件提交到 Github 上\"></a>将本地文件提交到 Github 上</h2><blockquote>\n<ol>\n<li>在 Github 上创建 repository</li>\n</ol>\n</blockquote>\n<p>点击 Your repositories.</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130343647.png\" alt=\"image-20230416130343647\"></p>\n<p>之后点击 <code>New</code> 。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130447956.png\" alt=\"image-20230416130447956\"></p>\n<p>输入创建的 Repository name，（记得勾选 Add a README file）。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130534223.png\" alt=\"image-20230416130534223\"></p>\n<blockquote>\n<ol start=\"2\">\n<li>克隆 Github 上的仓库到本地。</li>\n</ol>\n</blockquote>\n<p>点击 <code>Code</code> ，点击 <code>SSH</code> ， 复制链接。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416130922895.png\" alt=\"image-20230416130922895\"></p>\n<p>在 Git Bach 上输入 <code>git clone &quot;复制的链接&quot;</code> 命令。</p>\n<p>如下图所示，即为成功。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416131238787.png\" alt=\"image-20230416131238787\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416131655201.png\" alt=\"image-20230416131655201\"></p>\n<blockquote>\n<ol start=\"3\">\n<li>将本地文件提交到 Github 上。</li>\n</ol>\n</blockquote>\n<p>在 Git Bach 上输入 <code>cd text-01/</code> 命令（ cd 后面的是你创建的文件夹名字），或者是关掉Git Bach，在 text-01 文件夹中打开 Git Bach 。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132026682.png\" alt=\"image-20230416132026682\"></p>\n<p>输入 <code>git status</code> 命令可以查看仓库状态。</p>\n<p> <img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132615563.png\" alt=\"image-20230416132615563\"></p>\n<p>在 text-01中新建一个文件 work.txt，用于提交测试。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132803696.png\" alt=\"image-20230416132803696\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416132845151.png\" alt=\"image-20230416132845151\"></p>\n<p>输入 <code>git add ./</code> 命令（add 后面有空格，才到 .），再输入 <code>git commit -m&quot;注释&quot;</code> 命令。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133027119.png\" alt=\"image-20230416133027119\"></p>\n<p>输入 <code>git push origin main</code> 命令，等待完成后在 Github 上刷新页面，就会发现提交成功。</p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133255417.png\" alt=\"image-20230416133255417\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133410417.png\" alt=\"image-20230416133410417\"></p>\n<p><img src=\"/../image/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/image-20230416133440613.png\" alt=\"image-20230416133440613\"></p>\n<blockquote>\n<p>如果在输入 <code>git commit</code> 命令时出现 fatal: unable to auto-detect email address (got ‘…@…(none)’) 。这是由于未配置github用户名和邮箱所致</p>\n</blockquote>\n<p>解决方法：配置 Github 用户名与邮箱。用户名是 Github 上的用户名， 邮箱是注册 Github 时用的邮箱，输入命令时用户名与邮箱要加上 “” 。</p>\n<p><code>git config --global user.name &quot;你的用户名&quot;</code></p>\n<p><code>git config --global user.email &quot;你的邮箱&quot;</code></p>\n<p>以上就是使用 Git 提交本地文件到 Github 上的内容。</p>\n","path":"2023/12/05/使用Git提交本地文件到Github上/","permalink":"http://example.com/2023/12/05/%E4%BD%BF%E7%94%A8Git%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0Github%E4%B8%8A/","tags":[{"name":"GitHub","_id":"clq87ytoi000bzstfad13hpym","slug":"GitHub","path":"tags/GitHub/","permalink":"http://example.com/tags/GitHub/","length":1}],"categories":[],"prev":{"title":"如何高效且优雅做笔记？","date":"2023-12-09T09:02:36.000Z","summary":"优雅，太优雅了","slug":"如何高效且优雅做笔记？","published":true,"updated":"2023-12-14T14:16:03.044Z","_id":"clq87ytoj000gzstfgjyu3li9","layout":"post","photos":[],"link":"","excerpt":"","path":"2023/12/09/如何高效且优雅做笔记？/","permalink":"http://example.com/2023/12/09/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%B8%94%E4%BC%98%E9%9B%85%E5%81%9A%E7%AC%94%E8%AE%B0%EF%BC%9F/","__post":true},"next":{"title":"Hello World","date":"2023-12-05T11:16:45.000Z","summary":"记录第一次发博客","slug":"Hello","published":true,"updated":"2023-12-14T14:16:27.447Z","_id":"clq87yto80000zstffh2p1wl2","layout":"post","photos":[],"link":"","excerpt":"","path":"2023/12/05/Hello/","permalink":"http://example.com/2023/12/05/Hello/","__post":true},"__post":true}